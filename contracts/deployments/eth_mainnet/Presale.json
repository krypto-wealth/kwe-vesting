{
  "address": "0x609D40B9B27b356Fa0eA2C08c64Fe1b7c2321f7A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "investToken_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "startTimestamp_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "duration_",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint240",
              "name": "hardcap",
              "type": "uint240"
            },
            {
              "internalType": "uint16",
              "name": "price",
              "type": "uint16"
            }
          ],
          "internalType": "struct Presale.RoundInfo[]",
          "name": "rounds_",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "HardcapAccomplished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectStartTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroInvest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "roundId",
          "type": "uint8"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint240",
              "name": "hardcap",
              "type": "uint240"
            },
            {
              "internalType": "uint16",
              "name": "price",
              "type": "uint16"
            }
          ],
          "internalType": "struct Presale.RoundInfo[]",
          "name": "rounds_",
          "type": "tuple[]"
        }
      ],
      "name": "addRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserAllocations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allocations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserInvestmentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "roundId",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint216",
              "name": "amount",
              "type": "uint216"
            }
          ],
          "internalType": "struct Presale.InvestInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "roundId_",
          "type": "uint8"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investTokenReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "roundTotalInvested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint240",
          "name": "hardcap",
          "type": "uint240"
        },
        {
          "internalType": "uint16",
          "name": "price",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "setReceiverWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInvested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea8c77f91baa00a44555eba7bdaa51505a9c61eb7d4b892ad6c3dc0b68f29307",
  "receipt": {
    "to": null,
    "from": "0xEeF5B404eaBe06D3331E1E7f441DEb266C7ab974",
    "contractAddress": "0x609D40B9B27b356Fa0eA2C08c64Fe1b7c2321f7A",
    "transactionIndex": 78,
    "gasUsed": "1108007",
    "logsBloom": "0x
    "blockHash": "0x98a596c7490b595bd886f48d165c52e1b1fb0e49391a6215a0e53c154cdc0550",
    "transactionHash": "0xea8c77f91baa00a44555eba7bdaa51505a9c61eb7d4b892ad6c3dc0b68f29307",
    "logs": [
      {
        "transactionIndex": 78,
        "blockNumber": 17721707,
        "transactionHash": "0xea8c77f91baa00a44555eba7bdaa51505a9c61eb7d4b892ad6c3dc0b68f29307",
        "address": "0x609D40B9B27b356Fa0eA2C08c64Fe1b7c2321f7A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eef5b404eabe06d3331e1e7f441deb266c7ab974"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0x98a596c7490b595bd886f48d165c52e1b1fb0e49391a6215a0e53c154cdc0550"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 17721707,
        "transactionHash": "0xea8c77f91baa00a44555eba7bdaa51505a9c61eb7d4b892ad6c3dc0b68f29307",
        "address": "0x609D40B9B27b356Fa0eA2C08c64Fe1b7c2321f7A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000eef5b404eabe06d3331e1e7f441deb266c7ab974",
          "0x0000000000000000000000007d6465482e1e8f447d168f70a794d94392f56864"
        ],
        "data": "0x",
        "logIndex": 177,
        "blockHash": "0x98a596c7490b595bd886f48d165c52e1b1fb0e49391a6215a0e53c154cdc0550"
      }
    ],
    "blockNumber": 17721707,
    "cumulativeGasUsed": "8138772",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    1689706800,
    1141199,
    [
      {
        "hardcap": 783000000000,
        "price": 290
      },
      {
        "hardcap": 1287000000000,
        "price": 390
      },
      {
        "hardcap": 600000000000,
        "price": 500
      }
    ],
    "0x7d6465482E1e8F447D168F70a794D94392F56864",
    "0x7d6465482E1e8F447D168F70a794D94392F56864"
  ],
  "numDeployments": 1,
  "solcInputHash": "f4ed131f6f6335e2d675f7fea7579bcd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investToken_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration_\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint240\",\"name\":\"hardcap\",\"type\":\"uint240\"},{\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"}],\"internalType\":\"struct Presale.RoundInfo[]\",\"name\":\"rounds_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HardcapAccomplished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectStartTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroInvest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"roundId\",\"type\":\"uint8\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint240\",\"name\":\"hardcap\",\"type\":\"uint240\"},{\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"}],\"internalType\":\"struct Presale.RoundInfo[]\",\"name\":\"rounds_\",\"type\":\"tuple[]\"}],\"name\":\"addRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserInvestmentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"roundId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint216\",\"name\":\"amount\",\"type\":\"uint216\"}],\"internalType\":\"struct Presale.InvestInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"roundId_\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investTokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"roundTotalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint240\",\"name\":\"hardcap\",\"type\":\"uint240\"},{\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"setReceiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"gotbit\",\"kind\":\"dev\",\"methods\":{\"addRounds((uint240,uint16)[])\":{\"params\":{\"rounds_\":\"is array of new rounds\"}},\"getUserAllocations(address)\":{\"params\":{\"user_\":\"is address to view allocations for\"},\"returns\":{\"allocations\":\"array, where each index is user allocation for each round in tokens\"}},\"invest(uint256,uint8)\":{\"params\":{\"amount_\":\"stable token amount to invest\",\"roundId_\":\"id of round to invest\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setReceiverWallet(address)\":{\"params\":{\"receiver_\":\"is address of the new receiver\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Presale\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRounds((uint240,uint16)[])\":{\"notice\":\"Allows admin to add rounds\"},\"getUserAllocations(address)\":{\"notice\":\"Allows to view user allocations\"},\"getUserInvestmentInfo(address)\":{\"notice\":\"Returns array of all user investments\"},\"invest(uint256,uint8)\":{\"notice\":\"Allows user to invest\"},\"setReceiverWallet(address)\":{\"notice\":\"Allows admin to set invest token receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Presale.sol\":\"Presale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Presale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nerror ZeroAddress();\\nerror IncorrectStartTimestamp();\\nerror PresaleNotActive();\\nerror ZeroInvest();\\nerror ZeroRounds();\\nerror NotWhitelisted();\\nerror HardcapAccomplished();\\nerror IncorrectLengths();\\nerror ZeroDuration();\\n\\n/**\\n * @title Presale\\n * @author gotbit\\n */\\ncontract Presale is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct RoundInfo {\\n        uint240 hardcap; // in usdt\\n        uint16 price; // $ price without decimals * 10_000\\n    }\\n\\n    struct InvestInfo {\\n        uint8 roundId;\\n        uint32 timestamp;\\n        uint216 amount;\\n    }\\n\\n    RoundInfo[] public rounds;\\n\\n    IERC20 public immutable investToken;\\n    address public investTokenReceiver;\\n\\n    uint32 public immutable startTimestamp;\\n    uint32 public immutable duration;\\n\\n    uint256 public totalInvested;\\n\\n    mapping(uint8 => uint256) public roundTotalInvested;\\n    mapping(address => InvestInfo[]) private userInvestInfo;\\n\\n    event Invested(address indexed investor, uint256 amount, uint8 roundId);\\n\\n    constructor(\\n        address investToken_,\\n        uint32 startTimestamp_,\\n        uint32 duration_,\\n        RoundInfo[] memory rounds_,\\n        address receiver_,\\n        address owner_\\n    ) {\\n        if (\\n            investToken_ == address(0) ||\\n            owner_ == address(0) ||\\n            receiver_ == address(0)\\n        ) revert ZeroAddress();\\n        if (startTimestamp_ < block.timestamp) revert IncorrectStartTimestamp();\\n        if (rounds_.length == 0) revert ZeroRounds();\\n        if (duration_ == 0) revert ZeroDuration();\\n\\n        investToken = IERC20(investToken_);\\n\\n        startTimestamp = startTimestamp_;\\n        duration = duration_;\\n\\n        investTokenReceiver = receiver_;\\n\\n        for (uint256 i; i < rounds_.length; ) {\\n            rounds.push(rounds_[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    /// @notice Allows user to invest\\n    /// @param amount_ stable token amount to invest\\n    /// @param roundId_ id of round to invest\\n    function invest(uint256 amount_, uint8 roundId_) external {\\n        uint256 start = startTimestamp;\\n\\n        if (block.timestamp < start || start + duration < block.timestamp)\\n            revert PresaleNotActive();\\n        if (amount_ == 0) revert ZeroInvest();\\n\\n        if (roundTotalInvested[roundId_] + amount_ > rounds[roundId_].hardcap)\\n            revert HardcapAccomplished();\\n\\n        totalInvested += amount_;\\n        roundTotalInvested[roundId_] += amount_;\\n\\n        userInvestInfo[msg.sender].push(\\n            InvestInfo({\\n                roundId: roundId_,\\n                timestamp: uint32(block.timestamp),\\n                amount: uint216(amount_)\\n            })\\n        );\\n\\n        emit Invested(msg.sender, amount_, roundId_);\\n\\n        investToken.safeTransferFrom(msg.sender, investTokenReceiver, amount_);\\n    }\\n\\n    /// @notice Allows admin to set invest token receiver\\n    /// @param receiver_ is address of the new receiver\\n    function setReceiverWallet(address receiver_) external onlyOwner {\\n        if (receiver_ == address(0)) revert ZeroAddress();\\n\\n        investTokenReceiver = receiver_;\\n    }\\n\\n    /// @notice Allows admin to add rounds\\n    /// @param rounds_ is array of new rounds\\n    function addRounds(RoundInfo[] calldata rounds_) external onlyOwner {\\n        if (rounds_.length == 0) revert ZeroRounds();\\n\\n        for (uint256 i; i < rounds_.length; ) {\\n            rounds.push(rounds_[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows to view user allocations\\n    /// @param user_ is address to view allocations for\\n    /// @return allocations array, where each index is user allocation for each round in tokens\\n    function getUserAllocations(address user_)\\n        external\\n        view\\n        returns (uint256[] memory allocations)\\n    {\\n        allocations = new uint256[](rounds.length);\\n\\n        for (uint8 i; i < userInvestInfo[user_].length; ) {\\n            uint8 investRoundId = userInvestInfo[user_][i].roundId;\\n\\n            allocations[investRoundId] += userInvestInfo[user_][i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint8 i; i < allocations.length; ++i)\\n            allocations[i] = (allocations[i] * 10_000) / rounds[i].price;\\n    }\\n\\n    /// @notice Returns array of all user investments\\n    function getUserInvestmentInfo(address user_)\\n        external\\n        view\\n        returns (InvestInfo[] memory)\\n    {\\n        return userInvestInfo[user_];\\n    }\\n}\\n\",\"keccak256\":\"0x9c3eaf81521b4f7893679a0667d4a5bbdbae67de7162fea6d2de0675ad71d637\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063badf822b11610066578063badf822b1461024f578063dd073a0c14610276578063e6fd48bc14610289578063f2fde38b146102b057600080fd5b80638da5cb5b146101d75780639c932547146101fc578063a2c6d1771461021c578063a518488e1461022f57600080fd5b80635216aeec116100d35780635216aeec146101705780635e03b67a14610187578063715018a61461019a5780638c65c81f146101a257600080fd5b80630fb5a6b4146100fa57806317fa0f721461013b57806322912cb21461015b575b600080fd5b6101217f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020015b60405180910390f35b61014e610149366004610ca8565b6102c3565b6040516101329190610cd8565b61016e610169366004610ca8565b610360565b005b61017960035481565b604051908152602001610132565b61016e610195366004610d59565b6103b1565b61016e610606565b6101b56101b0366004610d85565b61061a565b604080516001600160f01b03909316835261ffff909116602083015201610132565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610132565b61017961020a366004610d9e565b60046020526000908152604090205481565b61016e61022a366004610db9565b610650565b61024261023d366004610ca8565b6106cf565b6040516101329190610e2e565b6101e47f000000000000000000000000000000000000000000000000000000000000000081565b6002546101e4906001600160a01b031681565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b61016e6102be366004610ca8565b6108bb565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610355576000848152602090819020604080516060810182529185015460ff81168352610100810463ffffffff16838501526501000000000090046001600160d81b0316908201528252600190920191016102fb565b505050509050919050565b610368610939565b6001600160a01b03811661038f5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000164281118061041457504261041263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001683610e88565b105b1561043257604051633844da5760e21b815260040160405180910390fd5b82600003610453576040516330be62cd60e11b815260040160405180910390fd5b60018260ff168154811061046957610469610ea1565b600091825260208083209091015460ff8516835260049091526040909120546001600160f01b039091169061049f908590610e88565b11156104be57604051631894575b60e11b815260040160405180910390fd5b82600360008282546104d09190610e88565b909155505060ff8216600090815260046020526040812080548592906104f7908490610e88565b9091555050336000818152600560209081526040808320815160608101835260ff88811680835263ffffffff4281168488019081526001600160d81b038d81168689019081528754600181018955978b5299899020955195909601805491519951909616650100000000000264ffffffffff999092166101000264ffffffffff19909116949093169390931791909117959095161790558051878152918201929092527f8be001c51fa67bb39d13928f57c4231ab199404a3e3e1de2ff6cd7756bfbba48910160405180910390a2600254610601906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169133911686610993565b505050565b61060e610939565b61061860006109f3565b565b6001818154811061062a57600080fd5b6000918252602090912001546001600160f01b0381169150600160f01b900461ffff1682565b610658610939565b600081900361067a5760405163065e270360e51b815260040160405180910390fd5b60005b8181101561060157600183838381811061069957610699610ea1565b835460018101855560009485526020909420604090910292909201929190910190506106c58282610eb7565b505060010161067d565b60015460609067ffffffffffffffff8111156106ed576106ed610f04565b604051908082528060200260200182016040528015610716578160200160208202803683370190505b50905060005b6001600160a01b03831660009081526005602052604090205460ff8216101561080b576001600160a01b0383166000908152600560205260408120805460ff841690811061076c5761076c610ea1565b60009182526020808320909101546001600160a01b038716835260059091526040909120805460ff9283169350909184169081106107ac576107ac610ea1565b9060005260206000200160000160059054906101000a90046001600160d81b03166001600160d81b0316838260ff16815181106107eb576107eb610ea1565b602002602001018181516107ff9190610e88565b9052505060010161071c565b5060005b81518160ff1610156108b55760018160ff168154811061083157610831610ea1565b90600052602060002001600001601e9054906101000a900461ffff1661ffff16828260ff168151811061086657610866610ea1565b602002602001015161271061087b9190610f1a565b6108859190610f31565b828260ff168151811061089a5761089a610ea1565b60209081029190910101526108ae81610f53565b905061080f565b50919050565b6108c3610939565b6001600160a01b03811661092d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610936816109f3565b50565b6000546001600160a01b031633146106185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610924565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526109ed908590610a43565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610a98826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b189092919063ffffffff16565b9050805160001480610ab9575080806020019051810190610ab99190610f72565b6106015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610924565b6060610b278484600085610b2f565b949350505050565b606082471015610b905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610924565b600080866001600160a01b03168587604051610bac9190610fb8565b60006040518083038185875af1925050503d8060008114610be9576040519150601f19603f3d011682016040523d82523d6000602084013e610bee565b606091505b5091509150610bff87838387610c0a565b979650505050505050565b60608315610c79578251600003610c72576001600160a01b0385163b610c725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610924565b5081610b27565b610b278383815115610c8e5781518083602001fd5b8060405162461bcd60e51b81526004016109249190610fd4565b600060208284031215610cba57600080fd5b81356001600160a01b0381168114610cd157600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610d36578151805160ff1685528681015163ffffffff16878601528501516001600160d81b03168585015260609093019290850190600101610cf5565b5091979650505050505050565b803560ff81168114610d5457600080fd5b919050565b60008060408385031215610d6c57600080fd5b82359150610d7c60208401610d43565b90509250929050565b600060208284031215610d9757600080fd5b5035919050565b600060208284031215610db057600080fd5b610cd182610d43565b60008060208385031215610dcc57600080fd5b823567ffffffffffffffff80821115610de457600080fd5b818501915085601f830112610df857600080fd5b813581811115610e0757600080fd5b8660208260061b8501011115610e1c57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015610e6657835183529284019291840191600101610e4a565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e9b57610e9b610e72565b92915050565b634e487b7160e01b600052603260045260246000fd5b81356001600160f01b038116808214610ecf57600080fd5b82546001600160f01b0319908116821784559150602084013561ffff81168114610ef857600080fd5b60f01b90911617905550565b634e487b7160e01b600052604160045260246000fd5b8082028115828204841417610e9b57610e9b610e72565b600082610f4e57634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8103610f6957610f69610e72565b60010192915050565b600060208284031215610f8457600080fd5b81518015158114610cd157600080fd5b60005b83811015610faf578181015183820152602001610f97565b50506000910152565b60008251610fca818460208701610f94565b9190910192915050565b6020815260008251806020840152610ff3816040850160208701610f94565b601f01601f1916919091016040019291505056fea264697066735822122086296d48935aafb43007060be18d5cbdee7d28b23d777d169659b453fb3df05d64736f6c63430008120033",
  "devdoc": {
    "author": "gotbit",
    "kind": "dev",
    "methods": {
      "addRounds((uint240,uint16)[])": {
        "params": {
          "rounds_": "is array of new rounds"
        }
      },
      "getUserAllocations(address)": {
        "params": {
          "user_": "is address to view allocations for"
        },
        "returns": {
          "allocations": "array, where each index is user allocation for each round in tokens"
        }
      },
      "invest(uint256,uint8)": {
        "params": {
          "amount_": "stable token amount to invest",
          "roundId_": "id of round to invest"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setReceiverWallet(address)": {
        "params": {
          "receiver_": "is address of the new receiver"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Presale",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRounds((uint240,uint16)[])": {
        "notice": "Allows admin to add rounds"
      },
      "getUserAllocations(address)": {
        "notice": "Allows to view user allocations"
      },
      "getUserInvestmentInfo(address)": {
        "notice": "Returns array of all user investments"
      },
      "invest(uint256,uint8)": {
        "notice": "Allows user to invest"
      },
      "setReceiverWallet(address)": {
        "notice": "Allows admin to set invest token receiver"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Presale.sol:Presale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1611,
        "contract": "contracts/Presale.sol:Presale",
        "label": "rounds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(RoundInfo)1600_storage)dyn_storage"
      },
      {
        "astId": 1616,
        "contract": "contracts/Presale.sol:Presale",
        "label": "investTokenReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1622,
        "contract": "contracts/Presale.sol:Presale",
        "label": "totalInvested",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1626,
        "contract": "contracts/Presale.sol:Presale",
        "label": "roundTotalInvested",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 1632,
        "contract": "contracts/Presale.sol:Presale",
        "label": "userInvestInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(InvestInfo)1607_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(InvestInfo)1607_storage)dyn_storage": {
        "base": "t_struct(InvestInfo)1607_storage",
        "encoding": "dynamic_array",
        "label": "struct Presale.InvestInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RoundInfo)1600_storage)dyn_storage": {
        "base": "t_struct(RoundInfo)1600_storage",
        "encoding": "dynamic_array",
        "label": "struct Presale.RoundInfo[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(InvestInfo)1607_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Presale.InvestInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(InvestInfo)1607_storage)dyn_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(InvestInfo)1607_storage": {
        "encoding": "inplace",
        "label": "struct Presale.InvestInfo",
        "members": [
          {
            "astId": 1602,
            "contract": "contracts/Presale.sol:Presale",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1604,
            "contract": "contracts/Presale.sol:Presale",
            "label": "timestamp",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1606,
            "contract": "contracts/Presale.sol:Presale",
            "label": "amount",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoundInfo)1600_storage": {
        "encoding": "inplace",
        "label": "struct Presale.RoundInfo",
        "members": [
          {
            "astId": 1597,
            "contract": "contracts/Presale.sol:Presale",
            "label": "hardcap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint240"
          },
          {
            "astId": 1599,
            "contract": "contracts/Presale.sol:Presale",
            "label": "price",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint240": {
        "encoding": "inplace",
        "label": "uint240",
        "numberOfBytes": "30"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
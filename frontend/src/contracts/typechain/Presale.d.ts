/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface PresaleInterface extends ethers.utils.Interface {
  functions: {
    'addRounds(tuple[])': FunctionFragment
    'duration()': FunctionFragment
    'getUserAllocations(address)': FunctionFragment
    'getUserInvestmentInfo(address)': FunctionFragment
    'invest(uint256,uint8)': FunctionFragment
    'investToken()': FunctionFragment
    'investTokenReceiver()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'roundTotalInvested(uint8)': FunctionFragment
    'rounds(uint256)': FunctionFragment
    'setReceiverWallet(address)': FunctionFragment
    'startTimestamp()': FunctionFragment
    'totalInvested()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addRounds',
    values: [{ hardcap: BigNumberish; price: BigNumberish }[]],
  ): string
  encodeFunctionData(functionFragment: 'duration', values?: undefined): string
  encodeFunctionData(functionFragment: 'getUserAllocations', values: [string]): string
  encodeFunctionData(functionFragment: 'getUserInvestmentInfo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'invest',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'investToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'investTokenReceiver', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'roundTotalInvested',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'rounds', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setReceiverWallet', values: [string]): string
  encodeFunctionData(functionFragment: 'startTimestamp', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalInvested', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'addRounds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'duration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserAllocations', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserInvestmentInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'invest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'investToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'investTokenReceiver', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'roundTotalInvested', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rounds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setReceiverWallet', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startTimestamp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalInvested', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'Invested(address,uint256,uint8)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Invested'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export type InvestedEvent = TypedEvent<
  [string, BigNumber, number] & {
    investor: string
    amount: BigNumber
    roundId: number
  }
>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export class Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: PresaleInterface

  functions: {
    addRounds(
      rounds_: { hardcap: BigNumberish; price: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    duration(overrides?: CallOverrides): Promise<[number]>

    getUserAllocations(
      user_: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { allocations: BigNumber[] }>

    getUserInvestmentInfo(
      user_: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([number, number, BigNumber] & {
          roundId: number
          timestamp: number
          amount: BigNumber
        })[],
      ]
    >

    invest(
      amount_: BigNumberish,
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    investToken(overrides?: CallOverrides): Promise<[string]>

    investTokenReceiver(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    roundTotalInvested(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { hardcap: BigNumber; price: number }>

    setReceiverWallet(
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    startTimestamp(overrides?: CallOverrides): Promise<[number]>

    totalInvested(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  addRounds(
    rounds_: { hardcap: BigNumberish; price: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  duration(overrides?: CallOverrides): Promise<number>

  getUserAllocations(user_: string, overrides?: CallOverrides): Promise<BigNumber[]>

  getUserInvestmentInfo(
    user_: string,
    overrides?: CallOverrides,
  ): Promise<
    ([number, number, BigNumber] & {
      roundId: number
      timestamp: number
      amount: BigNumber
    })[]
  >

  invest(
    amount_: BigNumberish,
    roundId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  investToken(overrides?: CallOverrides): Promise<string>

  investTokenReceiver(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  roundTotalInvested(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { hardcap: BigNumber; price: number }>

  setReceiverWallet(
    receiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  startTimestamp(overrides?: CallOverrides): Promise<number>

  totalInvested(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    addRounds(
      rounds_: { hardcap: BigNumberish; price: BigNumberish }[],
      overrides?: CallOverrides,
    ): Promise<void>

    duration(overrides?: CallOverrides): Promise<number>

    getUserAllocations(user_: string, overrides?: CallOverrides): Promise<BigNumber[]>

    getUserInvestmentInfo(
      user_: string,
      overrides?: CallOverrides,
    ): Promise<
      ([number, number, BigNumber] & {
        roundId: number
        timestamp: number
        amount: BigNumber
      })[]
    >

    invest(
      amount_: BigNumberish,
      roundId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    investToken(overrides?: CallOverrides): Promise<string>

    investTokenReceiver(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    roundTotalInvested(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { hardcap: BigNumber; price: number }>

    setReceiverWallet(receiver_: string, overrides?: CallOverrides): Promise<void>

    startTimestamp(overrides?: CallOverrides): Promise<number>

    totalInvested(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Invested(address,uint256,uint8)'(
      investor?: string | null,
      amount?: null,
      roundId?: null,
    ): TypedEventFilter<
      [string, BigNumber, number],
      { investor: string; amount: BigNumber; roundId: number }
    >

    Invested(
      investor?: string | null,
      amount?: null,
      roundId?: null,
    ): TypedEventFilter<
      [string, BigNumber, number],
      { investor: string; amount: BigNumber; roundId: number }
    >

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>
  }

  estimateGas: {
    addRounds(
      rounds_: { hardcap: BigNumberish; price: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    duration(overrides?: CallOverrides): Promise<BigNumber>

    getUserAllocations(user_: string, overrides?: CallOverrides): Promise<BigNumber>

    getUserInvestmentInfo(user_: string, overrides?: CallOverrides): Promise<BigNumber>

    invest(
      amount_: BigNumberish,
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    investToken(overrides?: CallOverrides): Promise<BigNumber>

    investTokenReceiver(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    roundTotalInvested(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    setReceiverWallet(
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    totalInvested(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addRounds(
      rounds_: { hardcap: BigNumberish; price: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUserAllocations(
      user_: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserInvestmentInfo(
      user_: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    invest(
      amount_: BigNumberish,
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    investToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    investTokenReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    roundTotalInvested(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    setReceiverWallet(
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalInvested(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
